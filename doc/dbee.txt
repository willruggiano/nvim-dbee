*dbee.txt*                                          Database Client for NeoVim

==============================================================================
Table of Contents                                     *dbee-table-of-contents*

1. Neovim DBee                                              |dbee-neovim-dbee|
  - Installation                               |dbee-neovim-dbee-installation|
  - Configuration                             |dbee-neovim-dbee-configuration|
  - Usage                                             |dbee-neovim-dbee-usage|
  - Projector Integration             |dbee-neovim-dbee-projector-integration|
2. DBee Architecture Overview                |dbee-dbee-architecture-overview|
  - Lua Architecture        |dbee-dbee-architecture-overview-lua-architecture|
  - Go Architecture          |dbee-dbee-architecture-overview-go-architecture|

==============================================================================
1. Neovim DBee                                              *dbee-neovim-dbee*

**Database Client for NeoVim!**

**Execute Your Favourite Queries From the Comfort of Your Editor!**

**Backend in Go!**

**Frontend in Lua!**

**Get Results FAST With Under-the-hood Iterator!**

**Integrates with nvim-projector!**

**Bees Love It!**

**Alpha Software - Expect Breaking Changes!**


INSTALLATION                                   *dbee-neovim-dbee-installation*

- packer.nvim:
    >lua
        use {
          "kndndrj/nvim-dbee",
          requires = {
            "MunifTanjim/nui.nvim",
          },
          run = function()
            -- Install tries to automatically detect the install method.
            -- if it fails, try calling it with one of these parameters:
            --    "curl", "wget", "bitsadmin", "go"
            require("dbee").install()
          end,
          config = function()
            require("dbee").setup(--[[optional config]])
          end
        }
    <
- lazy.nvim:
    >lua
        {
          "kndndrj/nvim-dbee",
          dependencies = {
            "MunifTanjim/nui.nvim",
          },
          build = function()
            -- Install tries to automatically detect the install method.
            -- if it fails, try calling it with one of these parameters:
            --    "curl", "wget", "bitsadmin", "go"
            require("dbee").install()
          end,
          config = function()
            require("dbee").setup(--[[optional config]])
          end,
        },
    <


PLATFORM SUPPORT ~

This project aims to be as cross-platform as possible, but there are some
limitations (for example some of the go dependencies only work on certain
platforms). To address this issue, the client implementations are detached from
the main logic and they register themselves to dbee backend on plugin start.
This allows the use of build constraints, which we use to exclued certain
client implementations on certain platforms.

The CI pipeline tries building the binary for GOARCH/GOOS combinations
specified in targets.json <ci/targets.json> - if the builds succeed, they are
stored in a remote bucket <https://github.com/kndndrj/nvim-dbee-bucket> on a
separate branch per run. Additionally, the install manifest
<lua/dbee/install/__manifest.lua> gets created.

To increase cgo cross-platform support, the pipeline uses zig as a C compiler.

To check if your platform is currently supported, check out the mentioned
manifest and the targets file.


MANUAL BINARY INSTALLATION ~

The installation examples include the `build`/`run` functions, which get
triggered once the plugin updates. This should be sufficient for the majority
of users. If that doesn’t include you, then you have a few options:

- just install with the `"go"` option (this performs `go install` under the
    hood):
    >lua
        require("dbee").install("go")
    <
- Download an already compiled binary from one of urls in the install manifest
    <lua/dbee/install/__manifest.lua>
- `go install` (the install location will vary depending on your local go
    configuration):
    >sh
        go install github.com/kndndrj/nvim-dbee/dbee@<version>
    <
- Clone and build
    >sh
        # Clone the repository and cd into the "go subfolder"
        git clone <this_repo>
        cd <this_repo>/dbee
        # Build the binary (optional output path)
        go build [-o ~/.local/share/nvim/dbee/bin/dbee]
    <


CONFIGURATION                                 *dbee-neovim-dbee-configuration*

You can pass an optional table parameter to `setup()` function.

Here are the defaults:

>lua
    M.default = {
      -- lazy load the plugin or not?
      lazy = false,
    
      -- loads connections from files and environment variables
      sources = {
        require("dbee.sources").EnvSource:new("DBEE_CONNECTIONS"),
        require("dbee.sources").FileSource:new(vim.fn.stdpath("cache") .. "/dbee/persistence.json"),
      },
      -- extra table helpers per connection type
      extra_helpers = {
        -- example:
        -- ["postgres"] = {
        --   ["List All"] = "select * from {table}",
        -- },
      },
      -- drawer window config
      drawer = {
        -- show help or not
        disable_help = false,
        -- mappings for the buffer
        mappings = {
          -- quit the dbee interface
          quit = { key = "q", mode = "n" },
          -- manually refresh drawer
          refresh = { key = "r", mode = "n" },
          -- actions perform different stuff depending on the node:
          -- action_1 opens a scratchpad or executes a helper
          action_1 = { key = "<CR>", mode = "n" },
          -- action_2 renames a scratchpad or sets the connection as active manually
          action_2 = { key = "cw", mode = "n" },
          -- action_3 deletes a scratchpad or connection (removes connection from the file if you configured it like so)
          action_3 = { key = "dd", mode = "n" },
          -- these are self-explanatory:
          -- collapse = { key = "c", mode = "n" },
          -- expand = { key = "e", mode = "n" },
          toggle = { key = "o", mode = "n" },
        },
        -- icon settings:
        disable_candies = false,
        candies = {
          -- these are what's available for now:
          history = {
            icon = "",
            icon_highlight = "Constant",
            text_highlight = "",
          },
          scratch = {
            icon = "",
            icon_highlight = "Character",
            text_highlight = "",
          },
          connection = {
            icon = "󱘖",
            icon_highlight = "SpecialChar",
            text_highlight = "",
          },
          database_switch = {
            icon = "",
            icon_highlight = "Character",
          },
          table = {
            icon = "",
            icon_highlight = "Conditional",
            text_highlight = "",
          },
          view = {
            icon = "",
            icon_highlight = "Debug",
            text_highlight = "",
          },
          add = {
            icon = "",
            icon_highlight = "String",
            text_highlight = "String",
          },
          edit = {
            icon = "󰏫",
            icon_highlight = "Directory",
            text_highlight = "Directory",
          },
          remove = {
            icon = "󰆴",
            icon_highlight = "SpellBad",
            text_highlight = "SpellBad",
          },
          help = {
            icon = "󰋖",
            icon_highlight = "Title",
            text_highlight = "Title",
          },
          source = {
            icon = "󰃖",
            icon_highlight = "MoreMsg",
            text_highlight = "MoreMsg",
          },
    
          -- if there is no type
          -- use this for normal nodes...
          none = {
            icon = " ",
          },
          -- ...and use this for nodes with children
          none_dir = {
            icon = "",
            icon_highlight = "NonText",
          },
    
          -- chevron icons for expanded/closed nodes
          node_expanded = {
            icon = "",
            icon_highlight = "NonText",
          },
          node_closed = {
            icon = "",
            icon_highlight = "NonText",
          },
        },
      },
    
      -- results window config
      result = {
        -- number of rows in the results set to display per page
        page_size = 100,
    
        -- progress (loading) screen options
        progress = {
          -- spinner to use, see lua/dbee/spinners.lua
          spinner = spinners.dots,
          -- prefix to display before the timer
          text_prefix = "Executing...",
        },
    
        -- mappings for the buffer
        mappings = {
          -- next/previous page
          page_next = { key = "L", mode = "" },
          page_prev = { key = "H", mode = "" },
          -- yank rows as csv/json
          yank_current_json = { key = "yaj", mode = "n" },
          yank_selection_json = { key = "yaj", mode = "v" },
          yank_all_json = { key = "yaJ", mode = "" },
          yank_current_csv = { key = "yac", mode = "n" },
          yank_selection_csv = { key = "yac", mode = "v" },
          yank_all_csv = { key = "yaC", mode = "" },
        },
      },
    
      -- editor window config
      editor = {
        -- mappings for the buffer
        mappings = {
          -- run what's currently selected on the active connection
          run_selection = { key = "BB", mode = "v" },
          -- run the whole file on the active connection
          run_file = { key = "BB", mode = "n" },
        },
      },
    
      -- call log window config
      call_log = {
        -- mappings for the buffer
        mappings = {
          -- show the result of the currently selected call record
          show_result = { key = "<CR>", mode = "" },
          -- cancel the currently selected call (if its still executing)
          cancel = { key = "d", mode = "" },
        },
    
        -- candies (icons and highlights)
        disable_candies = false,
        candies = {
          -- all of these represent call states
          unknown = {
            icon = "", -- this or first letters of state
            icon_highlight = "NonText", -- highlight of the state
            text_highlight = "", -- highlight of the rest of the line
          },
          executing = {
            icon = "󰑐",
            icon_highlight = "Constant",
            text_highlight = "Constant",
          },
          executing_failed = {
            icon = "󰑐",
            icon_highlight = "Error",
            text_highlight = "",
          },
          retrieving = {
            icon = "",
            icon_highlight = "String",
            text_highlight = "String",
          },
          retrieving_failed = {
            icon = "",
            icon_highlight = "Error",
            text_highlight = "",
          },
          archived = {
            icon = "",
            icon_highlight = "Title",
            text_highlight = "",
          },
          archive_failed = {
            icon = "",
            icon_highlight = "Error",
            text_highlight = "",
          },
          canceled = {
            icon = "",
            icon_highlight = "Error",
            text_highlight = "",
          },
        },
      },
    
      -- general UI config
      -- Default configuration uses a "layout" helper to save the existing ui before opening any windows,
      -- then makes a new empty window for the editor and then opens result and drawer.
      -- When later calling dbee.close(), the previously saved layout is restored.
      -- NOTE: "m" is just a global object - nothing special about it - you might as well just use global vars.
      --
      -- You can probably do anything you imagine with this - for example all floating windows, tiled/floating mix etc.
      ui = {
        -- commands that opens the window if the window is closed - for drawer/editor/result
        -- string or function
        window_commands = {
          editor = function()
            vim.cmd("new")
            layout.make_only(0)
            m.tmp_buf = vim.api.nvim_get_current_buf()
            return vim.api.nvim_get_current_win()
          end,
          result = "bo 15split",
          drawer = function()
            vim.cmd("to 40vsplit")
            m.drawer_win = vim.api.nvim_get_current_win()
            return m.drawer_win
          end,
          call_log = "belowright 15split",
        },
        -- how to open windows in order (with specified "window_command"s -- see above)
        window_open_order = { "editor", "result", "drawer", "call_log" },
    
        -- hooks before/after dbee.open()/.close()
        pre_open_hook = function()
          -- save layout before opening ui
          m.egg = layout.save()
        end,
        post_open_hook = function()
          -- delete temporary editor buffer
          vim.cmd("bd " .. m.tmp_buf)
          -- set cursor to drawer
          vim.api.nvim_set_current_win(m.drawer_win)
        end,
        pre_close_hook = function() end,
        post_close_hook = function()
          layout.restore(m.egg)
          m.egg = nil
        end,
      },
    }
<


USAGE                                                 *dbee-neovim-dbee-usage*

Call the `setup()` function with an optional config parameter. If you are not
using your plugin manager to lazy load for you, make sure to specify `{ lazy =
true }` in the config.

>lua
    -- Open/close/toggle the UI.
    require("dbee").open()
    require("dbee").close()
    require("dbee").toggle()
    -- Next/previous page of the results (there are the same mappings that work just inside the results buffer
    -- available in config).
    require("dbee").next()
    require("dbee").prev()
    -- Run a query on the active connection directly.
    require("dbee").execute(query)
    -- Store the current result to file/buffer/yank-register (see "Getting Started").
    require("dbee").store(format, output, opts)
<


GETTING STARTED ~

Here are a few steps to quickly get started:

- call the `setup()` function in your `init.lua`
- Specify connections using one or more sources (reffer to |dbee-this-section|).
- When you restart the editor, call `lua require("dbee").open()` to open the UI.
- Navigate to the drawer (tree) and use the following key-bindings to perform
    different actions depending on the context (the mappings can all be changed in
    the config):
    - All nodes:
        - Press `o` to toggle the tree node.
        - Press `r` to manually refresh the tree.
    - Connections:
        - Press `cw` to edit the connection
        - Press `dd` to delete it (if source supports saving, it’s also removed from
            there - see more below.)
        - Press `<CR>` to perform an action - view history or look at helper
            queries. Pressing `<CR>` directly on the connection node will set it as
            the active one
    - Scratchpads:
        - Press `<CR>` on the `new` node to create a new scratchpad.
        - When you try to save it to disk (`:w`), the path is automatically filled
            for you. You can change the name to anything you want, if you save it to
            the suggested directory, it will load the next time you open DBee.
        - Press `cw` to rename the scratchpad.
        - Press `dd` to delete it (also from disk).
        - Pressing `<CR>` on an existing scratchpad in the drawer will open it in
            the editor pane.
    - Help:
        - Just view the key bindings.
- Once you selected the connection and created a scratchpad, you can navigate to
    the editor pane (top-right by default) and start writing queries. In editor
    pane, you can use the following actions:
    - Highlight some text in visual mode and press `BB` - this will run the
        selected query on the active connection.
    - If you press `BB` in normal mode, you run the whole scratchpad on the active
        connection.
- If the request was successful, the results should appear in the "result" buffer
    (bottom one by default). If the total number of results was lower than the
    `page_size` parameter in config (100 by default), all results should already be
    present. If there are more than `page_size` results, you can "page" thrugh them
    using one of the following:
    - Using `require("dbee").next()` and `require("dbee").prev()` from anywhere
        (even if your cursor is outside the result buffer).
    - Using `L` for next and `H` for previous page if the cursor is located inside
        the results buffer.
- Once in the "result" buffer, you can yank the results with the following keys:
    - `yaj` yank current row as json (or row range in visual mode)
    - `yac` yank current row as CSV (or row range in visual mode)
    - `yaJ` to yank all rows as json
    - `yaC` to yank all rows as CSV
- The current result (of the active connection) can also be saved to a file,
    yank-register or buffer using `require("dbee").store()` command. Some examples:
    >lua
        -- All rows as CSV to current buffer:
        require("dbee").store("csv", "buffer", { extra_arg = 0 })
        -- Results from row 2 to row 7 as json to file (index is zero based):
        require("dbee").store("json", "file", { from = 2, to = 7, extra_arg = "path/to/file.json"  })
        -- Yank the first row as table
        require("dbee").store("table", "yank", { from = 0, to = 1 })
        -- Yank the last 2 rows as CSV
        -- (negative indices are interpreted as length+1+index - same as nvim_buf_get_lines())
        -- Be aware that using negative indices requires for the
        -- iterator of the result to be drained completely, which might affect large result sets.
        require("dbee").store("csv", "yank", { from = -3, to = -1 })
    <
- Once you are done or you want to go back to where you were, you can call
    `require("dbee").close()`.


SPECIFYING CONNECTIONS ~

Connection represents an instance of the database client (i.e. one database).
This is how it looks like:

>lua
    {
      id = "optional_identifier" -- only mandatory if you edit a file by hand. IT'S YOUR JOB TO KEEP THESE UNIQUE!
      name = "My Database",
      type = "sqlite", -- type of database driver
      url = "~/path/to/mydb.db",
    }
<

The connections are loaded to dbee using so-called "sources". They can be added
to dbee using the `setup()` function:

>lua
      require("dbee").setup {
        sources = {
          require("dbee.sources").MemorySource:new({
            {
              name = "...",
              type = "...",
              url = "...",
            },
            -- ...
          }),
          require("dbee.sources").EnvSource:new("DBEE_CONNECTIONS"),
          require("dbee.sources").FileSource:new(vim.fn.stdpath("cache") .. "/dbee/persistence.json"),
        },
        -- ...
      },
      -- ... the rest of your config
      }
<

The above sources are just built-ins. Here is a short description of them:

- `MemorySource` just loads the connections you give it as an argument.
- `EnvSource` loads connection from an environment variable Just export the
    variable you gave to the loader and you are good to go:
    >sh
          export DBEE_CONNECTIONS='[
              {
                  "name": "DB from env",
                  "url": "mysql://...",
                  "type": "mysql"
              }
          ]'
    <
- `FileSource` loads connections from a given json file. It also supports editing
    and adding connections interactively

If the source supports saving and editing you can add connections manually
using the "add" item in the drawer. Fill in the values and write the buffer
(`:w`) to save the connection. By default, this will save the connection to the
global connections file and will persist over restarts (because default
`FileSource` supports saving)

Another option is to use "edit" item in the tree and just edit the source
manually.

If you aren’t satisfied with the default capabilities, you can implement your
own source. You just need to fill the following interface and pass it to config
at setup.

>lua
    ---@class Source
    ---@field name fun(self: Source):string function to return the name of the source
    ---@field load fun(self: Source):connection_details[] function to load connections from external source
    ---@field save? fun(self: Source, conns: connection_details[], action: "add"|"delete") function to save connections to external source (optional)
    ---@field file? fun(self: Source):string function which returns a source file to edit (optional)
<


SECRETS

If you don’t want to have secrets laying around your disk in plain text, you
can use the special placeholders in connection strings (this works using any
method for specifying connections).

NOTE: _Currently only envirnoment variables are supported_

Example:

Using the `DBEE_CONNECTIONS` environment variable for specifying connections
and exporting secrets to environment:

>sh
    # Define connections
    export DBEE_CONNECTIONS='[
        {
            "name": "{{ env.SECRET_DB_NAME }}",
            "url": "postgres://{{ env.SECRET_DB_USER }}:{{ env.SECRET_DB_PASS }}@localhost:5432/{{ env.SECRET_DB_NAME }}?sslmode=disable",
            "type": "postgres"
        }
    ]'
    
    # Export secrets
    export SECRET_DB_NAME="secretdb"
    export SECRET_DB_USER="secretuser"
    export SECRET_DB_PASS="secretpass"
<

If you start neovim in the same shell, this will evaluate to the following
connection:

>lua
    { {
      name = "secretdb",
      url = "postgres://secretuser:secretpass@localhost:5432/secretdb?sslmode=disable",
      type = "postgres",
    } }
<


PROJECTOR INTEGRATION                 *dbee-neovim-dbee-projector-integration*

DBee is compatible with my other plugin nvim-projector
<https://github.com/kndndrj/nvim-projector>, a
code-runner/project-configurator.

To use dbee with it, simply use `"dbee"` as one of it’s outputs.


==============================================================================
2. DBee Architecture Overview                *dbee-dbee-architecture-overview*

The plugin is created from 2 parts:

- Lua frontend
- Go backend

These two parts should have clearly defined borders and not "leak"
responsibilities.


LUA ARCHITECTURE            *dbee-dbee-architecture-overview-lua-architecture*

>
                             │                                           ┌─────────────┐             ┌─────────┐
                             │    "dbee"            ┌────────────────────►             ├─────────────►         │
                             │                      │                    │   handler   │   mapping   │   Go    │
                             │                      │                 ┌──►             ├─────────────►         │
                             │                      │                 │  └─────────────┘             └─────────┘
                             │      ┌────────────┐  │                 │
                             │      │            │  │                 │
    ┌───────────────┐        │      │   drawer   ├──┤                 │
    │               │        │      │            │  │                 │
    │   projector   │        │      └────────────┘  │  ┌────────────┐ │
    │   extension   ├────────►                      │  │            │ │
    │               │        │                      └──►   editor   ├─┘
    └───────────────┘        │                         │            │
                             │                         └────────────┘
                             │
                             │
                             │
                             │      ┌─────────────┐     ┌────────────┐
                             │      │             │     │            │
                             │      │   install   │     │   loader   │
                             │      │             │     │            │
                             │      └─────────────┘     └────────────┘
                             │
<

Description:

- The "dbee" package consists of 3 major functional packages, 1 install package
    and additional "helper" packages.
- `install` package is independent of the other packages and is used for
    installation of the compiled go binary using the manifest generated by the CI
    pipeline.
- `loader` package is also independent and is used as the default loading and
    saving method in the config, which is later consumed by the handler
- `drawer` is the "tree" view in UI - it consumes the editor (to provide
    scratchpad view and to manage scratchpads) and the handler (for managing
    connections and providing layout of each database).
- `editor` is the "scratchpad" window in the UI and is used for managing
    scratchpads. It also consumes the handler in order to execute selected
    queries.
- `handler` is a mapping to Go backend - it holds all connections (a connection
    is an instance of the database) and manages them all calls to backend go
    through here. Handler also manages the "results" window in UI. handler is also
    responsible for providing layouts of databases to drawer.
- `projector extension` acts as an outside "client" and registers dbee as an
    output for nvim-projector.


GO ARCHITECTURE              *dbee-dbee-architecture-overview-go-architecture*

As We said, the Go backend is accessed exclusively through `handler` in lua.
The handler reads configurations for databases, remembers them and registers
them in the backend as well. This way, both `handler` and go’s `main()`
function have knowledge of active connections.

When a handler wants to perform an action on a specific connection, it sends
the connection’s id in the request to go.

>
                                │
                                │    "main.go"
                                │
                                │    ┌──────────────────────────────┐
                                │    │ map of                       │
                                │    │ connections                  │             ┌──────┐
                                │    │                              │             │┼┼┼┼┼┼│
                                │    │ ┌──────────────────────────┐ │             └──────┤
                                │    │ │ postgres_xyz             │ │    ┌────────►  DB  │
                                │    │ │                          │ │    │        ┌──────┤
                                │    │ │  ┌─────────────────────┐ │ │    │        │┼┼┼┼┼┼│
                                │    │ │  │clients (postgres)   ├────────┘        └──────┘
                                │    │ │  └────────┬────────────┘ │ │
                                │    │ │           │              │ │
                                │    │ │         iter     ┌─ ── ── ── ── ── ─iter ── ── ── ── ── ── ──
                                │    │ │           │      │       │ │                                 │
                                │    │ │ ┌─────────▼──────▼─────┐ │ │
                                │    │ │ │cache                 │ │ │                                 │
                                │    │ │ │                      │ │ │                ┌─────────────┐
                                │    │ │ │ - read first page ──────────────buffer────►             │  │
    ┌─────────────────┐         │    │ │ │ - read rest in bg    │ │ │                │             │
    │                 │         │    │ │ │                   ┌─────────────json──────►             │  │
    │   handler.lua   ├─────────►    │ │ │                   │  │ │ │                │   outputs   │
    │                 │         │    │ │ │ - idle ...  ──────┼─────────────csv───────►             │  │
    └─────────────────┘         │    │ │ │                   │  │ │ │                │             │
                                │    │ │ │                   └─────────────buffer────►             │  │
                                │    │ │ │                      │ │ │                └─────────────┘
                                │    │ │ │                      │ │ │                                 │
                                │    │ │ │                      │ │ │                ┌─────────────┐
                                │    │ │ │  - flush ─────────────────────────────────►   history   ├ ─┘
                                │    │ │ │                      │ │ │                │   output    │
                                │    │ │ └──────────────────────┘ │ │                └─────────────┘
                                │    │ │                          │ │
                                │    │ └──────────────────────────┘ │
                                │    │                              │
                                │    │ ┌──────────────────────────┐ │
                                │    │ │ sqlite_123               │ │
                                │    │ │  ┌────────────────┐      │ │
                                │    │ │  │clients (sqlite)│      │ │
                                │    │ │  └────────────────┘      │ │
                                │    │ │                          │ │
                                │    │ └──────────────────────────┘ │
                                │    │                              │
                                │    │            ...               │
                                │    │                              │
                                │    └──────────────────────────────┘
                                │
<

Now that we have a map of connections, we can focus on how each connection is
structured:

There are 2 primarily used result types in the connection:

- `IterResult` - result in a form of an iterator returned by the specific
    driver.
- `Result` - full in-memory result set, which is sent in full or in chunks to
    outputs.

Each connection has a specific driver implementation (`clients`) which are
required to implement "query" functionality and return an `IterResult` which is
an iterator over the results returned from the database.

Then the client’s internal `cache` reads the ammount of results required for
the first page (specified as a parameter) in the main thread and it immediately
sends it (drained first page `Result`) to the specified output (`buffer`) -
this makes an impression that results are available right away.

As soon as the first page is read, a background process is spawned which drains
the remaining results to connections’s internal cache.

When the iterator is drained and all results are in cache, we can do a few
things with it:

- send a chunk of `Result` to an output (e.g. page of the result) - usually used
    by `buffer` output
- send a full `Result` to an output - useful for "saving" (e.g. json or csv
    output)

When a user makes a new request to the client (executes a query), the in-memory
`Result` is flushed to history output, which saves it on disk for possible
latter consumption.

Note: _buffer, json and csv all implement the same Output interface and could
be used interchangably. Simillarly, clients and history implement the same
Input interface._

==============================================================================
3. Links                                                          *dbee-links*

1. *Screenshot*: assets/screenshot.jpg

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
